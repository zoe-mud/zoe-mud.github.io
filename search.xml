<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell脚本</title>
      <link href="/2023/08/09/Shell%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/08/09/Shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>shell脚本这个概念我知道大学毕业才有点概念，接下来我将写出我的学习体会。</p><p>shell分很多种，我主要使用Linux，所以自带的bash。</p><p>打开终端，屏幕上出现提示符：用户名@主机名</p><h2 id="The-art-of-command-lines-手册-“the-art-of-command-line-README-zh-md-at-master-·-jlevy-the-art-of-command-line-github-com-“"><a href="#The-art-of-command-lines-手册-“the-art-of-command-line-README-zh-md-at-master-·-jlevy-the-art-of-command-line-github-com-“" class="headerlink" title="The art of command lines[手册](“the-art-of-command-line&#x2F;README-zh.md at master · jlevy&#x2F;the-art-of-command-line (github.com)“)"></a><strong>The art of command lines</strong>[手册](“<a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">the-art-of-command-line&#x2F;README-zh.md at master · jlevy&#x2F;the-art-of-command-line (github.com)</a>“)</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><p>熟悉至少一个基于文本的编辑器（vim）。</p><pre><code class="bash">#打开文件$ vim filename#打开insert模式$ i#回到命令模式按esc#保存当前文件并退出Vim$:wq#不保存文件并退出Vim$:q!#删除当前行$ dd</code></pre><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p><pre><code class="bash">#print work dirctionary$ pwd#read documents$ man#search the keywords in the page of man_docs$apropos date# get the bash internal command and help_info（internal command = builtin）$ help cd#get the help_info about alias$ help -d#Determine whether a command is an executable, shell-builtin, or alias$type -a ls</code></pre><p>学会使用 &gt; 和 &lt; 来重定向输出和输入，学会使用 | 来重定向管道。明白 &gt; 会覆盖了输出文件而 &gt;&gt; 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。了解其对应的接口：0,1,2。</p><pre><code class="bash">#使用&gt;将命令的输出写入文件。如果文件已经存在，则会覆盖文件内容。$ command &gt; file.txt#使用&gt;&gt;将命令的输出添加到文件的末尾，而不会覆盖原有内容$ command &gt;&gt; file.txt#使用&lt;将文件中的内容作为命令的输入。$ command &lt; file.txt#使用|将一个命令的输出作为另一个命令的输入，command1 会生成输出，然后通过管道将其传递给 command2$ command1 | command2#例如：过滤数据，将打开名为 file.txt 的文件，并将其内容传递给 grep 命令进行过滤。grep 命令将会搜索包含关键词 keyword 的行并输出。$cat file.txt | grep keyword#标准输出（stdout）：命令的正常输出都会发送到stdout，默认情况下是在终端上显示。可以使用输出重定向符号&gt;或&gt;&gt;将stdout重定向到文件，从而将输出保存到文件中。#标准错误（stderr）：命令的错误输出会发送到stderr，默认情况下也是在终端上显示。可以使用重定向符号2&gt;将stderr重定向到文件，即将错误信息保存到文件中。#使用&gt;重定向stdout，并使用2&gt;重定向stderr到不同的文件。$ command &gt; output.txt 2&gt; error.txt#使用&amp;&gt;将stdout和stderr都重定向到同一个文件。$ command &amp;&gt; output_and_error.txt#进入目录/proc/pid/fd，可以查看口情况$#ps命令：查看当前运行程序#a：显示当前终端下的所有进程信息，包括其他用户的进程。#u：使用以用户为主的格式输出进程信息。#x：显示当前用户在所有终端下的进程。$ps aux#查看cup、内存情况$top#以树状图的方式展现进程之间的派生关系$ pstree -aup#调到前台$ fg num</code></pre><h1 id="一、程序"><a href="#一、程序" class="headerlink" title="一、程序"></a>一、程序</h1><p>命令由程序名+参数组成。如以下</p><pre><code class="bash">#打印当前时间$ date #打印参数$ echo hello#参数中有空格$ echo &quot;hello word&quot;#下述方法也行$ echo hello\ world</code></pre><p>程序执行是系统先在路径中搜索，以下是系统设置的路径</p><pre><code class="bash">$ echo $PATH</code></pre><p>使用which获取程序的路径</p><pre><code class="bash">$ which echo/usr/bin/echo</code></pre><p>但是获取不到shell的built-in的路径，如：cd、exec、return，因为cd is not the executable program as ls, but it is the internal command related to shell data and control. </p><pre><code class="bash">$ which cd...$type -a cdcd is a shell builtin</code></pre><p>变量与参数</p><pre><code class="bash">#定义一个变量$foo=var#使用变量$$(foo)#在字符串中使用变量&quot;we are in $(pwd)”&quot;the time is $(date)&quot;&quot;the content is $(foo)&quot;#常见参数$0 #脚本名$1 #第一个参数$# #参数数量$@ #所有参数 $$ #命令进程ID$? 未知的</code></pre><p>查找文件</p><pre><code class="bash">#ls$ ls foo/foo#find$ find . -name &quot;*.tmp&quot; -type f$ find . -path &#39;**/test/*.py&#39; -type f#查找一天以内修改过的时间$ find . -mtime -1#. 在此表示当前目录;-name “*ab” 表示查找以ab结尾的文件或文件名;-exec表示执行什么命令。后面跟要执行的命令。此处是rm -f，表示不确认删除;&#123;&#125; \;表示把查找到的结果发送到此来。$ find . -name &quot;*ab*&quot; -exec rm -f &#123;&#125; \;#在&#123;&#125;和\之间必须要有空格，否则会报上面的错</code></pre><p>查找文件内容</p><pre><code class="bash">#grep:过滤/查找出指定内容$grep fopobar foobar.sh#-R表示遍历整个目录$grep -R foobar foobar.sh #fzf:交互式查找$ cat a.c | fzf</code></pre><p> 目录列表</p><pre><code class="BASH">#递归查看所有$ls -R#树形结构$tree</code></pre><h1 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h1>]]></content>
      
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机系统基础</title>
      <link href="/2023/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>Recently，准备开一个大坑，是有关系统的。本篇只是计算机系统基础，后续可能学习CSAPP补充一些深入的。再就是系统学习一下操作系统。</p><h1 id="GCC"><a href="#GCC" class="headerlink" title="GCC"></a>GCC</h1><p>从.c文件变为.out文件的过程：预处理——编译——汇编——链接</p><p>以下用于显示详细的编译信息，当你在终端或命令行中执行这个命令时，GCC编译器将根据指定的源代码文件进行编译，并输出编译过程中的详细信息。这些详细信息包括编译器使用的选项、预处理、编译、汇编和链接阶段的命令行参数，以及各个阶段的输出结果。通过添加 <code>--verbose</code> 参数，你能够获得更多关于编译过程的详细信息，以便对编译器的行为进行分析和调试。这在排查编译错误或优化代码时非常有用。具体的输出信息会包括编译器的版本信息、所使用的配置选项、源代码文件的预处理结果、编译器生成的中间文件、链接器使用的命令行参数等。</p><pre><code class="bash">$ gcc a.c --verbose#显示结果#使用内置规格Using built-in specs.COLLECT_GCC=gccCOLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/11/lto-wrapperOFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsaOFFLOAD_TARGET_DEFAULT=1#目标平台：表示Target: x86_64-linux-gnuConfigured with: ../src/configure -v --with-pkgversion=&#39;Ubuntu 11.4.0-1ubuntu1~22.04&#39; --with-bugurl=file:///usr/share/doc/gcc-11/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-11 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --enable-cet --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-11-XeT9lY/gcc-11-11.4.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-11-XeT9lY/gcc-11-11.4.0/debian/tmp-gcn/usr --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-serialization=2Thread model: posixSupported LTO compression algorithms: zlib zstdgcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04)COLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; /usr/lib/gcc/x86_64-linux-gnu/11/cc1 -quiet -v -imultiarch x86_64-linux-gnu a.c -quiet -dumpbase a.c -dumpbase-ext .c -mtune=generic -march=x86-64 -version -fasynchronous-unwind-tables -fstack-protector-strong -Wformat -Wformat-security -fstack-clash-protection -fcf-protection -o /tmp/cchcQblE.sGNU C17 (Ubuntu 11.4.0-1ubuntu1~22.04) version 11.4.0 (x86_64-linux-gnu)        compiled by GNU C version 11.4.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version isl-0.24-GMPGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072ignoring nonexistent directory &quot;/usr/local/include/x86_64-linux-gnu&quot;ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/11/include-fixed&quot;ignoring nonexistent directory &quot;/usr/lib/gcc/x86_64-linux-gnu/11/../../../../x86_64-linux-gnu/include&quot;#include &quot;...&quot; search starts here:#include &lt;...&gt; search starts here: /usr/lib/gcc/x86_64-linux-gnu/11/include /usr/local/include /usr/include/x86_64-linux-gnu /usr/includeEnd of search list.GNU C17 (Ubuntu 11.4.0-1ubuntu1~22.04) version 11.4.0 (x86_64-linux-gnu)        compiled by GNU C version 11.4.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version isl-0.24-GMPGGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072Compiler executable checksum: 50eaa2331df977b8016186198deb2d18COLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; as -v --64 -o /tmp/ccB2ho2s.o /tmp/cchcQblE.sGNU assembler version 2.38 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.38COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/11/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/11/../../../:/lib/:/usr/lib/COLLECT_GCC_OPTIONS=&#39;-v&#39; &#39;-mtune=generic&#39; &#39;-march=x86-64&#39; &#39;-dumpdir&#39; &#39;a.&#39; /usr/lib/gcc/x86_64-linux-gnu/11/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/11/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/11/lto-wrapper -plugin-opt=-fresolution=/tmp/ccBQRvpC.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/11/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/11 -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/11/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/11/../../.. /tmp/ccB2ho2s.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/11/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/11/../../../x86_64-linux-gnu/crtn.o</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Ubuntu报错E:Unable to locate package yum</title>
      <link href="/2023/08/04/%E8%A7%A3%E5%86%B3Ubuntu%E6%8A%A5%E9%94%99E-Unable-to-locate-package-yum/"/>
      <url>/2023/08/04/%E8%A7%A3%E5%86%B3Ubuntu%E6%8A%A5%E9%94%99E-Unable-to-locate-package-yum/</url>
      
        <content type="html"><![CDATA[<h1 id="1、报错原因"><a href="#1、报错原因" class="headerlink" title="1、报错原因"></a>1、报错原因</h1><p>本来今天开开心心学Linux，结果碰到要安装SSH的指令：</p><pre><code class="bash">$ yum install openssh-server</code></pre><p>我在Ubuntu上执行命令后报错：<em>E</em>: Unable to locate package yum</p><h1 id="2、解决办法"><a href="#2、解决办法" class="headerlink" title="2、解决办法"></a>2、解决办法</h1><p>Ubuntu的包管理工具是apt-get，所以不必再安装yum。如果要安装其他包需要使用apt-get命令。</p><p>现在的我还不知道问题出现在哪里，只能上网搜索，最简单的就是update。</p><p>最后解决办法如下：</p><p>1、备份sources.list文件</p><pre><code class="bash">$ sudo cp /etc/apt/sources.list /etc/apt/sources.list.backup</code></pre><p>2、更换源</p><ul><li>编辑文件</li></ul><pre><code class="bash">$ sudo vim /etc/apt/sources.list</code></pre><ul><li>将下面网站文本复制粘贴并覆盖，粘贴的命令是 shift + insert。记得选择相应的Linux版本。查看Ubuntu版本的指令如下：</li></ul><pre><code class="bash">$ lsb_release -a</code></pre><ul><li><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华镜像源</a></p></li><li><p>在第一行添加镜像源如下：</p></li><li><p>更新源</p></li><li><p>安装yum</p></li><li><p>如果出现下列提示：The following packages have unmet dependencies</p><p>那就按提示逐一安装依赖</p><pre><code class="bash">$ sudo apt-get install python-sqlitecachec$ sudo apt-get install python-urlgrabber</code></pre></li><li><p>如果出现类似以下提示：</p><p>下列软件包有未满足的依赖关系：</p><p>python3-yaml : Breaks: libpython-stdlib (&lt; 2.7.18) but 2.7.5-5ubuntu3 is to be installed<br>                     Breaks: python-minimal (&lt; 2.7.18) but 2.7.5-5ubuntu3 is to be installed<br>E: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.</p><p><strong>分析原因：</strong></p><p>根据上述错误信息，安装yum时出现了依赖关系问题，其中python3-yaml的安装会破坏已安装的libpython-stdlib和python-minimal软件包，因为它们的版本过低。</p><p><strong>可以通过以下方法解决：</strong></p><p>1）更新系统：使用以下命令更新系统软件包：</p><pre><code class="bash">$ sudo apt-get update$ sudo apt-get upgrade</code></pre><p>更新完毕后，尝试重新安装yum软件包</p><p>2）升级软件包：如果更新系统后仍然无法解决问题，可以尝试升级python-minimal和libpython-stdlib软件包</p><pre><code class="bash">$ sudo apt-get install python-minimal libpython-stdlib</code></pre><p>更新完毕后，尝试重新安装yum软件包</p><p>3）手动安装依赖：如果升级软件包后仍然无法解决问题，可以尝试手动安装python3-yaml软件包：</p><pre><code class="bash">$ sudo apt-get install python3-six python3-yaml</code></pre><p>安装完毕后，尝试重新安装yum软件包。</p><p>如果以上方法都不能解决问题，可以尝试卸载已安装的python-minimal和libpython-stdlib软件包，并重新安装它们的较新版本。如果仍然无法解决问题，可以考虑使用其他软件包管理工具或者手动安装yum。</p></li></ul><p>3、vim编辑</p><p>这里提供vim的一些操作帮助</p><pre><code>Shift + I编辑文档Esc退出编辑:q!    关闭文档:wq!保存文档并关闭</code></pre><p>4、补充一个问题解决</p><p>上面在sources.list文件第一行添加了一句关于ubuntu的，然后在使用sudo apt-get update更新镜像源时，报错：</p><p>W: GPG 错误：<a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> trusty Release: 由于没有公钥，无法验证下列签名： NO_PUBKEY 40976EAF437D05B5 NO_PUBKEY 3B4FE6ACC0B21F32<br>E: 仓库 “<a href="http://archive.ubuntu.com/ubuntu">http://archive.ubuntu.com/ubuntu</a> trusty Release” 没有数字签名。<br>N: 无法安全地用该源进行更新，所以默认禁用该源。<br>N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。</p><p><strong>解决：从报错提示可看出 没有指定的公钥，执行命令安装指定的公钥即可</strong></p><pre><code class="bash">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32$ sudo apt-get update$ sudo apt-get upgrade </code></pre><p>5、补充一个常识</p><table><thead><tr><th align="left">linux系统基本上分两大类：</th><th>RedHat 系列：</th><th>Debian系列</th></tr></thead><tbody><tr><td align="left">1 RedHat系列：Redhat、Centos、Fedora等</td><td>1 常见的安装包格式 rpm 包，安装rpm包的命令是 “rpm -参数”</td><td>1 常见的安装包格式 deb 包，安装deb包的命令是 “dpkg -参数”</td></tr><tr><td align="left">2 Debian系列：Debian、Ubuntu等</td><td>2 包管理工具 yum</td><td>2 包管理工具 apt-get</td></tr><tr><td align="left"></td><td>3 支持tar包</td><td>3 支持tar包</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Ubuntu报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux远程登录</title>
      <link href="/2023/08/04/Linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2023/08/04/Linux%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>Linux 一般作为服务器使用，而服务器一般被我放在实验室，不可能一直在实验室操作 Linux 服务器。</p><p>Linux 系统中是通过 ssh 服务实现的远程登录功能，默认 ssh 服务端口号为 22。</p><p>Window 系统上 Linux 远程登录客户端有 SecureCRT, Putty, SSH Secure Shell 等，本文以Xshell 为例来登录远程服务器。</p><h5 id="查看ssh服务是否打开。"><a href="#查看ssh服务是否打开。" class="headerlink" title="查看ssh服务是否打开。"></a>查看ssh服务是否打开。</h5><h6 id="1、使用root用户登录，如果为非root用户则执行以下命令切换为root用户。"><a href="#1、使用root用户登录，如果为非root用户则执行以下命令切换为root用户。" class="headerlink" title="1、使用root用户登录，如果为非root用户则执行以下命令切换为root用户。"></a>1、使用root用户登录，如果为非root用户则执行以下命令切换为root用户。</h6><pre><code class="bash">$ su$ su - $ su root$ su - root</code></pre><p>如果切换root用户提示Authentication failure错误，第一种情况可能是root密码输入错误造成的，再仔细检查一遍是否输入错误。</p><p>第二种是刚安装完，没有设置root用户密码导致的，输入以下指令，然后会让你输入当前用户密码，输入完后再输入root用户密码就可以了。</p><pre><code class="bash">$ sudo passwd</code></pre><p>root切回到普通用户模式的指令如下：</p><pre><code class="bash">$ su lmj</code></pre><h6 id="2、查看SSH是否安装。"><a href="#2、查看SSH是否安装。" class="headerlink" title="2、查看SSH是否安装。"></a>2、查看SSH是否安装。</h6><h6 id="输入命令："><a href="#输入命令：" class="headerlink" title="输入命令："></a>输入命令：</h6><pre><code class="bash">$ ps -ef | grep ssh</code></pre><h6 id="3、开启sshd服务-："><a href="#3、开启sshd服务-：" class="headerlink" title="3、开启sshd服务 ："></a>3、开启sshd服务 ：</h6><pre><code class="bash">$ service sshd star</code></pre><h6 id="4、查看sshd服务的网络连接情况："><a href="#4、查看sshd服务的网络连接情况：" class="headerlink" title="4、查看sshd服务的网络连接情况："></a>4、查看sshd服务的网络连接情况：</h6><pre><code class="bash">$ netstat -ntlp-n或--numeric：直接使用ip地址，而不通过域名服务器；-t或--tcp：显示TCP传输协议的连线状况； -l或--listening：显示监控中的服务器的Socket-p或--programs：显示正在使用Socket的程序识别码和程序名称</code></pre><h6 id=""><a href="#" class="headerlink" title=""></a></h6>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2023/08/03/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/08/03/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h1><h2 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h2><ul><li><p>内核的引导。</p></li><li><p>运行 init。</p></li><li><p>系统初始化。</p></li><li><p>建立终端 。</p></li><li><p>用户登录系统。</p><h3 id="内核的引导"><a href="#内核的引导" class="headerlink" title="内核的引导"></a>内核的引导</h3><p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p><p>操作系统接管硬件以后，首先读入 &#x2F;boot 目录下的内核文件。</p><h3 id="运行init"><a href="#运行init" class="headerlink" title="运行init"></a>运行init</h3><p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</p><p>init 程序首先是需要读取配置文件 &#x2F;etc&#x2F;inittab</p><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h4><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”<strong>守护进程</strong>“（daemon）。</p><p>init进程的一大任务，就是去运行这些开机启动的程序。</p><p>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p><p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p>Linux系统有<strong>7</strong>个运行级别(runlevel)：</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登录</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登录后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登录后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><p>在init的配置文件中有这么一行： si::sysinit:&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit，它调用执行了&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p><p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p><p>l5:5:wait:&#x2F;etc&#x2F;rc.d&#x2F;rc 5</p><p> 这一行表示以5为参数运行&#x2F;etc&#x2F;rc.d&#x2F;rc，&#x2F;etc&#x2F;rc.d&#x2F;rc是一个Shell脚本，它接受5作为参数，去执行&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录下的所有的rc启动脚本，&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下。</p><p>而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。</p><p>&#x2F;etc&#x2F;rc.d&#x2F;rc5.d&#x2F;中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。</p><p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以&#x2F;var&#x2F;lock&#x2F;subsys&#x2F;下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p><p>这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p><p>至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p><h3 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h3><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p><p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端。</p><pre><code class="systemverilog">1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6</code></pre><p>从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p><p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><h3 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h3><p>一般来说，用户的登录方式有三种：</p><ul><li><p>（1）命令行登录</p></li><li><p>（2）ssh登录</p></li><li><p>（3）图形界面登录</p><p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p><p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p><p>Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。</p><p>然后 login 会对用户名进行分析：如果用户名不是 root，且存在 &#x2F;etc&#x2F;nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p><p>这通常用来系统维护时防止非root用户登录。只有&#x2F;etc&#x2F;securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p><p>&#x2F;etc&#x2F;usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p></li></ul><h3 id="图形模式与文字模式的切换方式"><a href="#图形模式与文字模式的切换方式" class="headerlink" title="图形模式与文字模式的切换方式"></a>图形模式与文字模式的切换方式</h3><p>Linux预设提供了六个命令窗口终端机让我们来登录。</p><p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p><p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p><p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p><p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1<del>F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1</del>F6 切换至命令窗口</p><h3 id="Linux-关机"><a href="#Linux-关机" class="headerlink" title="Linux 关机"></a>Linux 关机</h3><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p><p>关机指令为：shutdown ，你可以man shutdown 来看一下帮助文档。</p><p>例如你可以运行如下命令关机：</p><pre><code class="bash">sync 将数据由内存同步到硬盘中。shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。shutdown –h now 立马关机shutdown –h 20:25 系统会在今天20:25关机shutdown –h +10 十分钟后关机shutdown –r now 系统立马重启shutdown –r +10 系统十分钟后重启reboot 就是重启，等同于 shutdown –r nowhalt 关闭系统，等同于shutdown –h now 和 poweroff</code></pre><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> ,</p><p>重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p></li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>登录系统后，在当前命令窗口下输入命令：</p><pre><code class="bash">$ ls / </code></pre><p><img src="D:\software\Typora\images\tree-contents.png" alt="tree-contents"></p><p>以下是对这些目录的解释：</p><ul><li><strong>&#x2F;bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</li><li><strong>&#x2F;boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li><li><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</li><li><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li><li><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</li><li><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</li></ul><pre><code class="systemverilog">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre><ul><li><p><strong>&#x2F;root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>&#x2F;bin&#x2F;ls</strong> 目录下的。</p><p>值得提出的是 <strong>&#x2F;bin</strong>、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p><h2 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h2><p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组。</p><pre><code>total 700drwxr-xr-x   3 root root   4096 Jul 31 11:53 Dockerlrwxrwxrwx   1 root root      7 May  2 05:34 bin -&gt; usr/bindrwxr-xr-x   2 root root   4096 Apr 18  2022 bootdrwxr-xr-x   8 root root   2740 Aug  4 16:28 devdrwxr-xr-x  75 root root   4096 Aug  4 16:33 etcdrwxr-xr-x   3 root root   4096 Jul 31 11:46 home-rwxr-xr-x   3 root root 644432 Jul 31 10:40 initlrwxrwxrwx   1 root root      7 May  2 05:34 lib -&gt; usr/liblrwxrwxrwx   1 root root      9 May  2 05:34 lib32 -&gt; usr/lib32lrwxrwxrwx   1 root root      9 May  2 05:34 lib64 -&gt; usr/lib64lrwxrwxrwx   1 root root     10 May  2 05:34 libx32 -&gt; usr/libx32drwx------   2 root root  16384 Apr 11  2019 lost+founddrwxr-xr-x   2 root root   4096 May  2 05:34 mediadrwxr-xr-x   6 root root   4096 Jul 31 11:45 mntdrwxr-xr-x   2 root root   4096 May  2 05:34 optdr-xr-xr-x 205 root root      0 Aug  4 16:28 procdrwx------   4 root root   4096 Aug  4 16:37 rootdrwxr-xr-x   9 root root    260 Aug  4 16:50 runlrwxrwxrwx   1 root root      8 May  2 05:34 sbin -&gt; usr/sbindrwxr-xr-x   8 root root   4096 May  2 05:36 snapdrwxr-xr-x   2 root root   4096 May  2 05:34 srvdr-xr-xr-x  11 root root      0 Aug  4 16:28 sysdrwxrwxrwt   3 root root   4096 Aug  4 16:33 tmpdrwxr-xr-x  14 root root   4096 May  2 05:34 usrdrwxr-xr-x  13 root root   4096 May  2 05:35 var</code></pre><ul><li>第1个字符：<ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul></li><li>第2，3，4个字符：属主权限， <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。</li><li>第5，6，7个字符：属组权限。</li><li>第8，9，10个字符：其他用户权限。</li></ul><h3 id="更改文件属性："><a href="#更改文件属性：" class="headerlink" title="更改文件属性："></a>更改文件属性：</h3><h4 id="1、chgrp：更改文件属组"><a href="#1、chgrp：更改文件属组" class="headerlink" title="1、chgrp：更改文件属组"></a>1、chgrp：更改文件属组</h4><pre><code class="bash">chgrp [-R] 属组名 文件名-R : 进行递归(recursive)的持续变更，以及连同次目录下的所有文件都会变更</code></pre><h4 id="2、chown：更改文件属主，也可以同时更改文件属组"><a href="#2、chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2、chown：更改文件属主，也可以同时更改文件属组"></a>2、chown：更改文件属主，也可以同时更改文件属组</h4><pre><code>chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名</code></pre><h4 id="3、chmod：更改文件权限"><a href="#3、chmod：更改文件权限" class="headerlink" title="3、chmod：更改文件权限"></a>3、chmod：更改文件权限</h4><h5 id="1）数字法："><a href="#1）数字法：" class="headerlink" title="1）数字法："></a>1）数字法：</h5><pre><code class="bash">$ chmod [-R] xyz 文件或目录 #例如：$ chmod 777 .bashrc-------&gt;-rwxrwxrwx</code></pre><h5 id="2）符号法："><a href="#2）符号法：" class="headerlink" title="2）符号法："></a>2）符号法：</h5><p>使用<strong>chmod</strong>指令， <strong>u, g, o</strong> 来代表三种身份的权限， <strong>a</strong> 则代表 <strong>all</strong>，+(加入)  -(除去)  &#x3D;(设定)</p><pre><code class="bash">如果我们需要将文件权限设置为 -rwxr-xr-- ，可以使用 chmod u=rwx,g=rx,o=r 文件名#  touch test1    // 创建 test1 文件# ls -al test1    // 查看 test1 默认权限-rw-r--r-- 1 root root 0 Nov 15 10:32 test1# chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限# ls -al test1-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1</code></pre><h2 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h2><p>。。。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上分析二进制文件的10种方法</title>
      <link href="/2023/08/03/%E5%9C%A8Linux%E4%B8%8A%E5%88%86%E6%9E%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%8410%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
      <url>/2023/08/03/%E5%9C%A8Linux%E4%B8%8A%E5%88%86%E6%9E%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E7%9A%8410%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>每天都与二进制文件打交道，所说的二进制是指每天运行的可执行文件，从命令行工具到成熟的应用程序都是。</p><p>在这篇文章中，我将介绍一些流行的Linux工具和命令。</p><p>请记住：学习在正确的场合使用正确的工具需要大量的耐心与练习。</p><p>​                                                                                   <strong>File</strong></p><p>它的作用：帮助确定文件类型。</p><p>这将是你进行二进制分析的起点。我们每天都在与文件打交道，并非所有的文件都是可执行类型，除此之外还有各种各样的文件类型。在你开始之前，你需要了解要分析的文件类型。是二进制文件、库文件、ASCII 文本文件、视频文件、图片文件、PDF、数据文件等文件吗？</p><p>file 命令将帮助你确定你所处理的文件类型。</p><pre><code class="bash">$ file /bin/ls/bin/ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=94943a89d17e9d373b2794dcb1f7e38c95b66c86, stripped$$ file /etc/passwd/etc/passwd: ASCII text$</code></pre><pre><code class="bash">1、ELF 64-bit LSB executable：可执行与可链接格式）是一种常见的可执行文件格式，用于存储可执行文件、目标代码、共享库和核心转储文件。它是一种二进制文件格式，用于在Linux和其他操作系统上执行程序。2、架构：x86-64，表示这是一个64位的x86架构可执行文件。3、版本：版本为1 (SYSV)，指明使用的是SYSV版本的可执行文件格式。4、dynamically linked (uses shared libs)：指出该可执行文件使用了共享库进行动态链接。5、GNU/Linux版本：适用于GNU/Linux 2.6.32，表示该可执行文件适用于GNU/Linux内核版本为2.6.32的系统。6、BuildID：是一个用于唯一标识构建的标识符，提供了该可执行文件构建的SHA1哈希值。7、Stripped：表示该可执行文件已经被剥离（stripped），即已经去除了调试符号和其他不必要的信息，以减小文件大小。</code></pre><h2 id="ldd"><a href="#ldd" class="headerlink" title="ldd"></a>ldd</h2><p>它的作用：打印共享对象依赖关系。</p><p>如果你已经在一个可执行的二进制文件上使用了上面的 <code>file</code> 命令，你肯定会看到输出中的“动态链接dynamically linked”信息。</p><p>软件开发的时候，我们尽量将大多数程序常用的任务封装起来，所有这些常见的被抽象成一组通用的函数，然后每个人都能使用。这些常见的函数被放在一个叫 <code>libc</code> 或 <code>glibc</code> 的库中。</p><p>如何找到可执行程序所依赖的库？这就是 <code>ldd</code> 命令的作用了。对动态链接的二进制文件运行该命令会显示出<strong>所有依赖库</strong>和<strong>它们的路径</strong>。</p><pre><code class="bash">$ ldd /bin/ls        linux-vdso.so.1 (0x00007ffd9e787000)        libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f5425993000)        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f542576b000)        libpcre2-8.so.0 =&gt; /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f54256d4000)        /lib64/ld-linux-x86-64.so.2 (0x00007f54259e9000)$</code></pre><h2 id="ltrace"><a href="#ltrace" class="headerlink" title="ltrace"></a>ltrace</h2><p>它的作用：库调用跟踪器。</p><p>我们现在知道如何使用 <code>ldd</code> 命令找到一个可执行程序所依赖的库。然而，一个库可以包含数百个函数。在这几百个函数中，哪些是我们的二进制程序正在使用的实际函数？</p><p><code>ltrace</code> 命令可以显示运行时从库中调用的所有函数。在下面的例子中，你可以看到被调用的函数名称，以及传递给该函数的参数。你也可以在输出的最右边看到这些函数返回的内容。</p><pre><code class="bash">$ ltrace ls__libc_start_main(0x4028c0, 1, 0x7ffd94023b88, 0x412950 &lt;unfinished ...&gt;strrchr(&quot;ls&quot;, &#39;/&#39;)                                                                  = nilsetlocale(LC_ALL, &quot;&quot;)                                                               = &quot;en_US.UTF-8&quot;bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;)                                    = &quot;/usr/share/locale&quot;textdomain(&quot;coreutils&quot;)                                                             = &quot;coreutils&quot;__cxa_atexit(0x40a930, 0, 0, 0x736c6974756572)                                      = 0isatty(1)                                                                           = 1getenv(&quot;QUOTING_STYLE&quot;)                                                             = nilgetenv(&quot;COLUMNS&quot;)                                                                   = nilioctl(1, 21523, 0x7ffd94023a50)                                                     = 0&lt;&lt; snip &gt;&gt;fflush(0x7ff7baae61c0)                                                              = 0fclose(0x7ff7baae61c0)                                                              = 0+++ exited (status 0) +++$</code></pre><h2 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h2><p>它的作用：以 ASCII、十进制、十六进制或八进制显示文件内容。</p><p>通常情况下，当你用一个应用程序打开一个文件，而它不知道如何处理该文件时，就会出现这种情况。尝试用 <code>vim</code> 打开一个可执行文件或视频文件，你屏幕上会看到的只是抛出的乱码。</p><p>在 <code>hexdump</code> 中打开未知文件，可以帮助你看到文件的具体内容。你也可以选择使用一些命令行选项来查看用 ASCII 表示的文件数据。这可能会帮助你了解到它是什么类型的文件</p><pre><code class="bash">$  hexdump -C /bin/ls | head00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|00000010  03 00 3e 00 01 00 00 00  b0 6a 00 00 00 00 00 00  |..&gt;......j......|00000020  40 00 00 00 00 00 00 00  20 14 02 00 00 00 00 00  |@....... .......|00000030  00 00 00 00 40 00 38 00  0d 00 40 00 1f 00 1e 00  |....@.8...@.....|00000040  06 00 00 00 04 00 00 00  40 00 00 00 00 00 00 00  |........@.......|00000050  40 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |@.......@.......|00000060  d8 02 00 00 00 00 00 00  d8 02 00 00 00 00 00 00  |................|00000070  08 00 00 00 00 00 00 00  03 00 00 00 04 00 00 00  |................|00000080  18 03 00 00 00 00 00 00  18 03 00 00 00 00 00 00  |................|00000090  18 03 00 00 00 00 00 00  1c 00 00 00 00 00 00 00  |................|$</code></pre><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>它的作用：打印文件中的可打印字符的字符串。</p><p>如果你只是在二进制中寻找可打印的字符，那么 <code>hexdump</code> 对于你的使用场景来说似乎有点矫枉过正，你可以使用 <code>strings</code> 命令。</p><p>在开发软件的时候，各种文本&#x2F;ASCII 信息会被添加到其中，比如打印信息、调试信息、帮助信息、错误等。只要这些信息都存在于二进制文件中，就可以用 <code>strings</code> 命令将其转储到屏幕上。</p><pre><code class="bash">$ strings /bin/ls</code></pre><h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><p>它的作用：显示有关 ELF 文件的信息。</p><p>ELF（可执行和可链接文件格式Executable and Linkable File Format）是可执行文件或二进制文件的主流格式，不仅是 Linux 系统，也是各种 UNIX 系统的主流文件格式。如果你已经使用了像 <code>file</code> 命令这样的工具，它告诉你文件是 ELF 格式，那么下一步就是使用 <code>readelf</code> 命令和它的各种选项来进一步分析文件。</p><p>在使用 <code>readelf</code> 命令时，有一份实际的 ELF 规范的参考是非常有用的。你可以在<a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">这里</a>找到该规范。 </p><pre><code class="bash">$ radelf -h /bin/lsELF Header:  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00  Class:                             ELF64  Data:                              2&#39;s complement, little endian  Version:                           1 (current)  OS/ABI:                            UNIX - System V  ABI Version:                       0  Type:                              DYN (Position-Independent Executable file)  Machine:                           Advanced Micro Devices X86-64  Version:                           0x1  Entry point address:               0x6ab0  Start of program headers:          64 (bytes into file)  Start of section headers:          136224 (bytes into file)  Flags:                             0x0  Size of this header:               64 (bytes)  Size of program headers:           56 (bytes)  Number of program headers:         13  Size of section headers:           64 (bytes)  Number of section headers:         31  Section header string table index: 30</code></pre><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><p>它的作用：从对象文件中显示信息。</p><p>二进制文件是通过你编写的源码创建的，这些源码会通过一个叫做编译器的工具进行编译。这个编译器会生成相对于源代码的机器语言指令，然后由 CPU 执行特定的任务。这些机器语言代码可以通过被称为汇编语言的助记词来解读。汇编语言是一组指令，它可以帮助你理解由程序所进行并最终在 CPU 上执行的操作。</p><p>通过使用<code>objdump</code>命令，你可以深入了解二进制文件的结构和内容。它可以显示二进制文件的头部信息、节（section）信息、符号表、反汇编代码等。通过分析这些信息，你可以了解二进制文件的组成部分和执行流程。</p><p>请记住：汇编语言是特定于体系结构的。</p><pre><code class="bash">$ objdump -d /bin/ls | head/bin/ls:     file format elf64-x86-64Disassembly of section .init:0000000000402150 &lt;_init@@Base&gt;:  402150:       48 83 ec 08             sub    $0x8,%rsp  402154:       48 8b 05 6d 8e 21 00    mov    0x218e6d(%rip),%rax        # 61afc8 &lt;__gmon_start__&gt;  40215b:       48 85 c0                test   %rax,%rax$</code></pre><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><p>它的作用：跟踪系统调用和信号。</p><p>如果你用过前面提到的 <code>ltrace</code>，那就把 <code>strace</code> 想成是类似的。唯一的区别是，<code>strace</code> 工具不是追踪调用的库，而是追踪系统调用。系统调用是你与内核对接来完成工作的。</p><p>举个例子，如果你想把一些东西打印到屏幕上，你会使用标准库 <code>libc</code> 中的 <code>printf</code> 或 <code>puts</code> 函数；但是，在底层，最终会有一个名为 <code>write</code> 的系统调用来实际把东西打印到屏幕上。</p><pre><code class="bash">$ strace -f /bin/lsexecve(&quot;/bin/ls&quot;, [&quot;/bin/ls&quot;], [/* 17 vars */]) = 0brk(NULL)                               = 0x686000mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f967956a000access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3fstat(3, &#123;st_mode=S_IFREG|0644, st_size=40661, ...&#125;) = 0mmap(NULL, 40661, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f9679560000close(3)                                = 0&lt;&lt; snip &gt;&gt;fstat(1, &#123;st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...&#125;) = 0mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f9679569000write(1, &quot;R2  RH\n&quot;, 7R2  RH)                 = 7close(1)                                = 0munmap(0x7f9679569000, 4096)            = 0close(2)                                = 0exit_group(0)                           = ?+++ exited with 0 +++$</code></pre><h2 id="nm"><a href="#nm" class="headerlink" title="nm"></a>nm</h2><p>的作用：列出对象文件中的符号。</p><p>如果你所使用的二进制文件没有被剥离，<code>nm</code> 命令将为你提供在编译过程中嵌入到二进制文件中的有价值的信息。<code>nm</code> 可以帮助你从二进制文件中识别变量和函数。你可以想象一下，如果你无法访问二进制文件的源代码时，这将是多么有用。</p><p>为了展示 <code>nm</code>，我们快速编写了一个小程序，用 <code>-g</code> 选项编译，我们会看到这个二进制文件没有被剥离。</p><pre><code class="bash">$ cat hello.c#include &lt;stdio.h&gt;int main() &#123;    printf(&quot;Hello world!&quot;);    return 0;&#125;$$ gcc -g hello.c -o hello$$ file hellohello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=3de46c8efb98bce4ad525d3328121568ba3d8a5d, not stripped$$ ./helloHello world!$$$ nm hello | tail0000000000600e20 d __JCR_END__0000000000600e20 d __JCR_LIST__00000000004005b0 T __libc_csu_fini0000000000400540 T __libc_csu_init                 U __libc_start_main@@GLIBC_2.2.5000000000040051d T main                 U printf@@GLIBC_2.2.50000000000400490 t register_tm_clones0000000000400430 T _start0000000000601030 D __TMC_END__$</code></pre><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2>]]></content>
      
      
      
        <tags>
            
            <tag> “binary” </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建我的个人博客</title>
      <link href="/2023/08/02/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/08/02/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建个人博客跟从以下几个步骤"><a href="#搭建个人博客跟从以下几个步骤" class="headerlink" title="搭建个人博客跟从以下几个步骤"></a>搭建个人博客跟从以下几个步骤</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
